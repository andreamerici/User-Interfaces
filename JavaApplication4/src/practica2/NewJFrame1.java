/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica2;

import java.awt.event.KeyEvent;

/**
 * @authors Andrea Merici
 */
public class NewJFrame1 extends javax.swing.JFrame {

    public static int minimum = -1;
    public static int maximum = -1;
    
    /**
     * Creates new form NewJFrame1
     */
    public NewJFrame1() {
        initComponents();
        jSlider1.setEnabled(false);
        infoText.setText("Type the minimum value and maximum value");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        infoText = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jSlider1 = new javax.swing.JSlider();
        minField = new javax.swing.JTextField();
        maxLabel = new javax.swing.JLabel();
        minLabel = new javax.swing.JLabel();
        maxField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(59, 130, 194));

        jTextArea1.setColumns(10);
        jTextArea1.setRows(10);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel3.setFont(new java.awt.Font("Marker Felt", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Info box");

        infoText.setColumns(20);
        infoText.setRows(5);
        jScrollPane2.setViewportView(infoText);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(jLabel3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(174, 212, 230));

        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        minField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                minFieldKeyTyped(evt);
            }
        });

        maxLabel.setFont(new java.awt.Font("Malayalam MN", 0, 13)); // NOI18N
        maxLabel.setForeground(new java.awt.Color(0, 102, 102));
        maxLabel.setText("Maximum");

        minLabel.setFont(new java.awt.Font("Myanmar MN", 0, 13)); // NOI18N
        minLabel.setForeground(new java.awt.Color(0, 102, 102));
        minLabel.setText("Minimum");

        maxField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                maxFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(minLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minField, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(maxLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maxField, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(207, 207, 207))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxLabel)
                    .addComponent(minField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minLabel))
                .addGap(18, 18, 18)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Event associated with the modification of the slider
     * @param evt: ChangeEvent 
     */
    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        
        // Get the value of the slider if maximum and minimum are correctly set
        if(minimum != -1 && maximum != -1){
            int valor = jSlider1.getValue();
            infoText.setText("Actual value of the slider: " + valor);
        
            jTextArea1.setText( Utils.getModifiedMatrix(valor) );
        }
    }//GEN-LAST:event_jSlider1StateChanged

    /**
     * Event associated with the insertion of a data in the minField
     * @param evt: KeyEvent
     */
    private void minFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minFieldKeyTyped
        char key = evt.getKeyChar();
        infoText.setText("");

        // check if the inserted character could be accepted
        if((!Character.isDigit(key)) & !(KeyEvent.VK_BACK_SPACE == key) & !(KeyEvent.VK_DELETE == key)){
                showDigitErrorMessage(evt);
        }else{
            int temp = -1;

            // The inserted character is a digit
            if(!(KeyEvent.VK_BACK_SPACE == key) & !(KeyEvent.VK_DELETE == key)){
                temp = Integer.parseInt(minField.getText() + key);
            }else{
                
                // the related field is not empty
                if(!(minField.getText().equals(""))){
                    temp = Integer.parseInt(minField.getText());
                }
            }
                
            // Check method
            if(check(temp, false)){
                minimum = temp;
                setValues();
            }else{
                infoText.setText("Maximum has to be bigger than minimum");
                jSlider1.setEnabled(false);
                jTextArea1.setText("");
            }                
        }
    }//GEN-LAST:event_minFieldKeyTyped

    /**
     * Event associated with the insertion of a data in the maxField
     * @param evt: KeyEvent
     */
    private void maxFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxFieldKeyTyped
        char key = evt.getKeyChar();
        infoText.setText("");
        
        // check if the inserted character could be accepted
        if((!Character.isDigit(key)) & !(KeyEvent.VK_BACK_SPACE == key) & !(KeyEvent.VK_DELETE == key)){
                showDigitErrorMessage(evt);
        }else{
            int temp = -1;
            
            // The inserted character is a digit
            if(!(KeyEvent.VK_BACK_SPACE == key) & !(KeyEvent.VK_DELETE == key)){
                temp = Integer.parseInt(maxField.getText() + key);
            }else{
                
                // the related field is not empty
                if(!(maxField.getText().equals(""))){
                    temp = Integer.parseInt(maxField.getText());
                }
            }
            
            // Check method
            if(check(temp, true)){
                maximum = temp;
                setValues();
            }else{
                infoText.setText("Maximum has to be bigger than minimum");
                jSlider1.setEnabled(false);
                jTextArea1.setText("");
            }                
        }
    }//GEN-LAST:event_maxFieldKeyTyped
    
    /**
     * Show an error message
     * @param evt: KeyEvent
     */
    private void showDigitErrorMessage(java.awt.event.KeyEvent evt){
        getToolkit().beep();
        infoText.setText("Only digits are allowed");
        evt.consume();
    }
    
    /**
     * Method that set the correct configuration of the slider
     */
    private void setValues(){
        
        if(maximum != -1 & minimum != -1){
            jSlider1.setEnabled(true);
            
            jSlider1.setMinimum(minimum);
            jSlider1.setMaximum(maximum);
            jSlider1.setMajorTickSpacing((maximum - minimum)/2);
            jSlider1.setPaintTicks(true);
            jSlider1.setPaintLabels(true);
        
            jTextArea1.setText( Utils.getOriginalMatrix(minimum, maximum) );
            infoText.setText("The new values have been set correctly \n\nYou can use the slider to modify the matrix");
        }
    }
    
    /**
     * Method that manages the verification of the inserted value
     * @param val: the value that has to be inserted
     * @param isMax: if true, val refers to the maximum value
     * @return true if the inserted value is correct
     */
    private boolean check(int val, boolean isMax){
        
        if(val != -1){
            if((minimum == -1 & maximum == -1) || (minimum != -1 & maximum == -1 & !isMax) || (minimum == -1 & maximum != -1 & isMax)){
                
                if(isMax){
                    infoText.setText("You can now insert the minimum value");
                }else{
                    infoText.setText("You can now insert the maximum value");
                }   
                return true;
            }else{
                if(isMax){
                    return Utils.checkValidity(minimum, val);
                }else{
                    return Utils.checkValidity(val, maximum);
                }
            }
        }
        return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea infoText;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField maxField;
    private javax.swing.JLabel maxLabel;
    private javax.swing.JTextField minField;
    private javax.swing.JLabel minLabel;
    // End of variables declaration//GEN-END:variables
}
