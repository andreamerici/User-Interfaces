

import java.awt.Cursor;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.*;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Class for the Archives Compression Program
 * @author Andrea Merici
 */
public class NewJFrame extends javax.swing.JFrame implements PropertyChangeListener{

    // Object for the management of the separate thread
    Worker1 worker;
    
    // Object for the management of the folder selection
    JFileChooser fc = new JFileChooser();
    
    // Input and output folders
    File archivoInput;
    File archivoOutput;

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        setTitle("Archives Compression Program");
        
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setAcceptAllFileFilterUsed(false);
        
        cancelButton.setEnabled(false);
        jProgressBar1.setValue(0);
    }   
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cancelButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        inputButton = new javax.swing.JButton();
        outputButton = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        inputLabel = new javax.swing.JLabel();
        outputLabel = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        cancelButton.setBackground(java.awt.SystemColor.controlShadow);
        cancelButton.setText("CANCEL");
        cancelButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cancelButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cancelButtonMouseExited(evt);
            }
        });

        startButton.setBackground(java.awt.SystemColor.controlShadow);
        startButton.setText("START");
        startButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        startButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                startButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                startButtonMouseExited(evt);
            }
        });

        inputButton.setText("Select folder to compress");
        inputButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                inputButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                inputButtonMouseExited(evt);
            }
        });
        inputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputButtonActionPerformed(evt);
            }
        });

        outputButton.setText("Select destination folder");
        outputButton.setMaximumSize(new java.awt.Dimension(153, 23));
        outputButton.setMinimumSize(new java.awt.Dimension(153, 23));
        outputButton.setPreferredSize(new java.awt.Dimension(153, 23));
        outputButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                outputButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                outputButtonMouseExited(evt);
            }
        });
        outputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputButtonActionPerformed(evt);
            }
        });

        title.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        title.setForeground(new java.awt.Color(51, 51, 255));
        title.setText("ARCHIVES COMPRESSION PROGRAM");

        inputLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        outputLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jProgressBar1.setStringPainted(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(title)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 11, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(inputButton, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(outputButton, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(inputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(outputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(inputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inputButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(outputButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(56, 56, 56)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(cancelButton))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Event associated with the Start button
     * @param evt: MouseEvent
     */
    private void startButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startButtonMouseClicked

    if(startButton.isEnabled()){
         
        // The destination folder is missing
        if(archivoInput == null & archivoOutput != null){
            JOptionPane.showMessageDialog(null, "The folder to compress is missing", "Folder missing", JOptionPane.WARNING_MESSAGE);            
        
        // The folder to compress is missing
        }else if(archivoInput != null & archivoOutput == null){
            JOptionPane.showMessageDialog(null, "The destination folder is missing", "Folder missing", JOptionPane.WARNING_MESSAGE);            
        
        // Both the folders are missing
        }else if(archivoInput == null & archivoOutput == null){
            JOptionPane.showMessageDialog(null, "The requested folders are missing", "Folder missing", JOptionPane.WARNING_MESSAGE);
        
        }else{
            
            // The two folders are equals
            if(archivoInput.equals(archivoOutput)){
                JOptionPane.showMessageDialog(null, "The selected folders must be different ", "Folders not accepted", JOptionPane.ERROR_MESSAGE);
            
            // Start the task
            }else{   
                startButton.setEnabled(false);
                cancelButton.setEnabled(true);
            
                // Create and set the worker component
                worker = new Worker1();
                worker.addPropertyChangeListener(this);
                worker.execute();
            }
        }
    }

    }//GEN-LAST:event_startButtonMouseClicked

    /**
     * Event associated with the button for the selection of the folder to compress
     * @param evt: ActionEvent
     */
    private void inputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputButtonActionPerformed
        int res = fc.showDialog(this, "Select");

        if (res == JFileChooser.APPROVE_OPTION) {
            archivoInput = fc.getSelectedFile();
            inputLabel.setText(archivoInput.getPath());                       
        }
        
        jProgressBar1.setValue(0);
    }//GEN-LAST:event_inputButtonActionPerformed

    /**
     * Event associated with the button for the selection of the destination folder
     * @param evt: ActionEvent
     */
    private void outputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputButtonActionPerformed
        int res = fc.showDialog(this, "Select");

        if (res == JFileChooser.APPROVE_OPTION) {
            archivoOutput = fc.getSelectedFile();
            outputLabel.setText(archivoOutput.getPath());
        }            
        
        jProgressBar1.setValue(0);
    }//GEN-LAST:event_outputButtonActionPerformed

    /**
     * Event associate with the Cancel button
     * @param evt: MouseEvent
     */
    private void cancelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseClicked
        if(cancelButton.isEnabled()){
            worker.setInterrupted(true);
            JOptionPane.showMessageDialog(null, "Aborting attempt in progress...", "Interruption", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_cancelButtonMouseClicked

    private void inputButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputButtonMouseEntered
        setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_inputButtonMouseEntered

    private void outputButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outputButtonMouseEntered
        setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_outputButtonMouseEntered

    private void startButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startButtonMouseEntered
        if(startButton.isEnabled()){
            setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_startButtonMouseEntered

    private void cancelButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseEntered
        if(cancelButton.isEnabled()){
            setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_cancelButtonMouseEntered

    private void inputButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputButtonMouseExited
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_inputButtonMouseExited

    private void outputButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outputButtonMouseExited
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_outputButtonMouseExited

    private void startButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startButtonMouseExited
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_startButtonMouseExited

    private void cancelButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseExited
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_cancelButtonMouseExited
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton inputButton;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JButton outputButton;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JButton startButton;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables

    /**
     * Listener for the update of the progress bar
     * @param evt: PropertyChangeEvent
     */
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        
        if("progress" == evt.getPropertyName()){
            int progress = worker.getProgress();
            
            if(!worker.isInterrupted()){
                jProgressBar1.setValue(progress);

                if(progress == 100){
                    JOptionPane.showMessageDialog(null, "The folder is now compressed", "Process completed", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
    }
    
/**
 * Class that manages the separate thread
 */
class Worker1 extends SwingWorker<Void, Void> {
   
    // if true, the task must be interrupted
    private boolean interrupted = false;
    
    public void setInterrupted(boolean value){
        interrupted = value;
        inputButton.setEnabled(false);
        outputButton.setEnabled(false);
    }
    
    public boolean isInterrupted(){
        return interrupted;
    }
    
    /**
     * Flow executed in background
     * @return Void
     * @throws FileNotFoundException
     * @throws IOException 
     */
   @Override
    public Void doInBackground() throws FileNotFoundException, IOException {

        // Adjust the progress bar
        setProgress(0);
    
        // Compression
        String sourceFile = archivoInput.getPath();
        FileOutputStream fos = new FileOutputStream(archivoOutput.getPath() + "\\" + archivoInput.getName() + ".zip");
        ZipOutputStream zipOut = new ZipOutputStream(fos);
        File fileToZip = new File(sourceFile);
        String filename = fileToZip.getName();
        zipFile(fileToZip, filename, zipOut, fileToZip.listFiles().length);
        zipOut.close();
        fos.close();
        
        // Adjust the progress bar
        setProgress(100);
        
        return null;
    }
    
    /**
     * Flow executed at the end of doInBackground method
     */
   @Override
    protected void done() {
        
        // Reset the initial configuration of the buttons
        startButton.setEnabled(true);
        cancelButton.setEnabled(false);
        inputButton.setEnabled(true);
        outputButton.setEnabled(true);
        
        // if true, delete the generated file
        if(interrupted){
            
            File f = new File(archivoOutput.getPath() + "\\" + archivoInput.getName() + ".zip");      
            f.delete();
        }
    }

    /**
     * Method that manages the correct compression of the selected file
     * @param fileToZip: file to compress
     * @param fileName: name of the file to compress
     * @param zipOut: Destination folder stream
     * @param numberFiles: number of files inside the folder to compress
     * @throws IOException 
     */
    private void zipFile(File fileToZip, String fileName, ZipOutputStream zipOut, int numberFiles) throws IOException {

        if (fileToZip.isHidden()) {
            return;
        }
        
        // Checkpoint for the interruptions
        if (fileToZip.isDirectory() & !interrupted) {
            if (fileName.endsWith("/")) {
                zipOut.putNextEntry(new ZipEntry(fileName));
                zipOut.closeEntry();
            } else {
                zipOut.putNextEntry(new ZipEntry(fileName + "/"));
                zipOut.closeEntry();
            }
            File[] children = fileToZip.listFiles();
            
            // Recursive method
            for (int i = 0; i < children.length; i++) {
                zipFile(children[i], fileName + "/" + children[i].getName(), zipOut, 0);
                
                // Update of the progress bar
                if(numberFiles != 0){
                    setProgress(i*100/numberFiles);
                }

            }
            return;
        }
        
        // Checkpoint for the interruptions
        if(!interrupted){
            // Data writing operations
            FileInputStream fis = new FileInputStream(fileToZip);
            ZipEntry zipEntry = new ZipEntry(fileName);
            zipOut.putNextEntry(zipEntry);
            byte[] bytes = new byte[1024];
            int length;
            while ((length = fis.read(bytes)) >= 0) {
                zipOut.write(bytes, 0, length);
            }
            fis.close();
        }

    }

}

}